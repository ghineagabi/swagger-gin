openapi: 3.0.3
info:
  title: Swagger Go Gin API
  description: ''
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080
tags:
  - name: user
    description: User related operations
  - name: post
    description: Everything related to posts (facebook posts alike)
  - name: comment
    description: Everything related to handling comments
  - name: misc
    description: Unrelated to DB tables
paths:
  /user:
    post:
      tags:
        - user
      summary: Create an user
      description: With the given information, caches the data and sends a token to the email for verification
      operationId: insertAbstractUserHandler
      requestBody:
        description: Information related to the user registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUser'
        required: true
      responses:
        '202':
          description: Email sent
        '400':
          description: Validation error/Bad request
        '409':
          description: Email already exists
    delete:
      tags:
        - user
      summary: Deletes user from the database
      description: Requires having the credentials as a JSON
      operationId: deleteUserHandler
      responses:
        '202':
          description: Successful operation
    patch:
      tags:
        - user
      summary: Updates user information
      description: Updates user information
      operationId: updateAbstractUserHandler
      requestBody:
        description: Information regarding updating user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserToUpdate"
      responses:
        '200':
          description: Successful operation
  /verifyEmail:
    post:
      tags:
        - user
      summary: verifies the token sent to the email
      description: verifies the token sent to the email
      operationId: verifyEmail
      parameters:
        - name: token
          in: query
          description: verification token
          required: true
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid token
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      security:
        - basicAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      security:
        - basicAuth: []      
      responses:
        default:
          description: successful operation
  /changePassword:
    post:
      tags:
        - user
      summary: Resets the password (when already logged in)
      operationId: resetPasswordHandler
      security:
        - basicAuth: []
      requestBody:
        description: Information for resetting the password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /resetPassword:
    post:
      tags:
        - user
      summary: Finalize the reset password process
      operationId: verifyForgotPasswordHandler
      requestBody:
        description: Finalize the reset password process
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPassword"
      parameters:
        - name: token
          in: query
          description: verification token
          required: true
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /forgotPassword:
    post:
      tags:
        - user
      summary: Sends a token to the specified email 
      operationId: forgotPasswordHandler
      requestBody:
        description: Information for resetting the password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneralEmail"
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid format
  /verifyToken:
    post:
      tags:
        - user
      summary: Verifies the token
      operationId: verifyToken
      parameters:
        - name: token
          in: query
          description: verification token
          required: true
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid format
  /post:
    post:
      tags:
        - post
      summary: Create a post
      operationId: insertPostHandler
      security:
        - basicAuth: []      
      requestBody:
        description: Information for creating a post
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostToCreate"
      responses:
        '200':
          description: successful operation
    get:
      tags:
        - post
      summary: Get posts by title
      operationId: getPostsHandler
      security:
        - basicAuth: []
      parameters:
        - name: title
          in: query
          description: title of post
          required: true
          explode: true
          schema:
            type: string
            default: example
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostToGet'
    patch:
      tags:
        - post
      summary: Update post
      operationId: updatePostHandler
      security:
        - basicAuth: []
      requestBody:
        description: Information for creating a post
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostToUpdate"
      responses:
        '200':
          description: successful operation
  /post/{postId}:
    delete:
      tags:
        - post
      summary: Delete post by id
      parameters:
        - name: postId
          in: path
          description: ID of post to comment
          required: true
          schema:
            type: integer
            format: int64
      operationId: deletePostHandler
      security:
        - basicAuth: []
      responses:
        '200':
          description: successful operation
  /postTitles:
    get:
      tags:
        - post
      summary: get post titles
      operationId: getPostTitleshandler
      parameters:
        - name: title
          in: query
          description: title of post
          required: true
          explode: true
          schema:
            type: string
            default: example
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          
  /post/like/{postId}:
    post:
      tags:
        - post
      summary: Like a certain post
      operationId: likePostHandler
      parameters:
        - name: postId
          in: path
          description: ID of post to like
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
  /post/{postId}/comment:
    get:
      tags:
        - comment
      summary: gets comments from a post
      description: ''
      operationId: getCommentHandler
      parameters:
        - name: postId
          in: path
          description: ID of post to comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentToGet'
  /post/comment:
    post:
      tags:
        - comment
      summary: Adds a comment to a post
      operationId: insertCommentHandler
      responses:
        '200':
          description: successful operation
        '401':
          description: session expired
        '400':
          description: bad request
  /post/comment/like/{commentId}:
    post:
      tags:
        - comment
      summary: Like a comment
      operationId: likeCommentHandler
      parameters:
        - name: commentId
          in: path
          description: ID of comment to like
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid comment
  /post/comment/respond/{commentId}:
    post:
      tags:
        - comment
      summary: Respond to a comment
      operationId: insertRespondToCommentHandler
      parameters:
        - name: commentId
          in: path
          description: ID of comment to respond
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /post/comment/{commentId}:
    patch:
      tags:
        - comment
      summary: Edit a comment
      operationId: updateCommentHandler
      parameters:
        - name: commentId
          in: path
          description: ID of comment to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CommentToCreate'
      responses:
        '200':
          description: Successful operation
components:
  schemas:
    UserCredentials:
      type: object
      properties:
        password:
          type: string
          example: "@Str0nGpAssw0rD!"
        email:
          type: string
          example: "example@yahoo.com"
    AbstractUser:
      required:
        - firstName
        - lastName
        - confirmPassword
        - password
        - email
      type: object
      properties:
        firstName:
          type: string
          example: "gin "
        lastName:
          type: string
          example: "gonic"
        password:
          type: string
          example: "@Str0nGpAssw0rD!"
        confirmPassword:
          type: string
        email:
          type: string
          example: "example@yahoo.com"
    AbstractUserToUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "gin "
        lastName:
          type: string
          example: "Palo Alto"
    ForgotPassword:
      required:
        - password
        - confirmPassword
      type: object
      properties:
        password:
          type: string
        confirmPassword:
          type: string
    ResetPassword:
      required:
        - oldPassword
        - password
        - confirmPassword
      type: object
      properties:
        oldPassword:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    CommentToCreate:
      required:
        - content
      type: object
      properties:
        postId:
          type: integer
          format: int32
        content:
          type: string
          example: "This is my first comment"
    CommentToGet:
      type: object
      properties:
        fullName:
          type: string
          example: "gin gonic"
        postId:
          type: integer
          format: int32
          example: 3
        content:
          type: string
        date:
          type: string
          example: "10.12.2020 10:00:00Z00:00"
        commentID:
          type: integer
          format: int32
        isEdited:
          type: boolean
        numberOfLikes:
          type: integer
          format: int32
        respondingToID:
          type: integer
          format: int32
    PostToGet:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        fullName:
          type: string
    PostToUpdate:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int32
        content:
          type: string
        title:
          type: string
    PostToCreate:
      required:
        - title
        - content
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    GeneralEmail:
      required:
        - email
      type: string
      properties:
        email:
          type: string
          
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic